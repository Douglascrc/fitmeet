openapi: 3.0.0
info:
  title: Desafio técnico - Engenheiro back-end
  version: "1.0.0"
  description: Documentação da API do desafio técnico.
servers:
  - url: http://localhost:3000

components:
  schemas:
    User:
      type: object
      properties:
        id: { type: string, format: uuid }
        name: { type: string }
        email: { type: string, format: email }
        cpf: { type: string }
        avatar: { type: string }
        xp: { type: integer }
        level:
          type: integer
          default: 1
        achievements:
          type: array
          items: { $ref: "#/components/schemas/Achievement" }
    Achievement:
      type: object
      properties:
        name: { type: string }
        criterion: { type: string }
    Activity:
      type: object
      properties:
        id: { type: string, format: uuid }
        title: { type: string }
        description: { type: string }
        type: { type: string }
        image: { type: string }
        confirmationCode: { type: string }
        scheduledDate: { type: string, format: date-time }
        createdAt: { type: string, format: date-time }
        completedAt: { type: string, format: date-time }
        private: { type: boolean }
    ErrorResponse:
      type: object
      properties:
        error: { type: string }

  responses:
    Unauthorized:
      description: Autenticação necessária
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/ErrorResponse"
          example:
            error: "Autenticação necessária"
    Forbidden:
      description: Acesso negado
      content:
        application/json:
          schema: { $ref: "#/components/schemas/ErrorResponse" }
    NotFound:
      description: Recurso não encontrado
      content:
        application/json:
          schema: { $ref: "#/components/schemas/ErrorResponse" }
    InternalServerError:
      description: Internal Server Error
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/ErrorResponse"
          example:
            error: "Erro inesperado"

  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer

paths:
  # ===== AUTENTICAÇÃO =====
  /auth/register:
    post:
      tags: [Autenticação]
      summary: Cadastrar novo usuário
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                name: { type: string }
                email: { type: string, format: email }
                cpf: { type: string }
                password: { type: string }
              required: [name, email, cpf, password]
      responses:
        "201":
          description: Created
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Usuário criado com sucesso"
        "409":
          description: Conflict
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: "O e-mail ou CPF informado já pertence a outro usuário"
        "500":
          $ref: "#/components/responses/InternalServerError"

  /auth/sign-in:
    post:
      tags: [Autenticação]
      summary: Login do usuário
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                email: { type: string }
                password: { type: string }
              required: [email, password]
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  token: { type: string }
                  user: { $ref: "#/components/schemas/User" }
        "401":
          $ref: "#/components/responses/Unauthorized"
        "500":
          $ref: "#/components/responses/InternalServerError"

  # ===== USUÁRIOS =====
  ## GET endpoints
  /user:
    get:
      tags: [Usuários]
      summary: Buscar dados do usuário
      security: [{ bearerAuth: [] }]
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/User"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "500":
          $ref: "#/components/responses/InternalServerError"

  /user/preferences:
    get:
      tags: [Usuários]
      summary: Obter interesses do usuário
      security: [{ bearerAuth: [] }]
      responses:
        "200":
          description: Lista de interesses
          content:
            application/json:
              schema:
                type: array
                items: { type: string }
        "401":
          $ref: "#/components/responses/Unauthorized"
        "500":
          $ref: "#/components/responses/InternalServerError"

  ## POST endpoints
  /user/preferences/define:
    post:
      tags: [Usuários]
      summary: Definir interesses do usuário
      security: [{ bearerAuth: [] }]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: array
              items:
                type: string
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Preferências atualizadas com sucesso"
        "400":
          description: IDs inválidos
          content:
            application/json:
              schema: { $ref: "#/components/schemas/ErrorResponse" }
        "401":
          $ref: "#/components/responses/Unauthorized"
        "500":
          $ref: "#/components/responses/InternalServerError"

  ## PUT endpoints
  /user/avatar:
    put:
      tags: [Usuários]
      summary: Atualizar foto de perfil
      security: [{ bearerAuth: [] }]
      requestBody:
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                avatar:
                  type: string
                  format: binary
      responses:
        "200":
          description: Avatar atualizado
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/User"
        "400":
          description: Formato de imagem inválido
          content:
            application/json:
              schema: { $ref: "#/components/schemas/ErrorResponse" }
        "401":
          $ref: "#/components/responses/Unauthorized"

  /user/update:
    put:
      tags: [Usuários]
      summary: Editar dados do usuário
      security: [{ bearerAuth: [] }]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                name: { type: string }
                email: { type: string, format: email }
                password: { type: string }
              required: [name, email, password]
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/User"
        "400":
          description: Atualização inválida
          content:
            application/json:
              schema: { $ref: "#/components/schemas/ErrorResponse" }
        "401":
          $ref: "#/components/responses/Unauthorized"
        "500":
          $ref: "#/components/responses/InternalServerError"

  ## DELETE endpoints
  /user/deactivate:
    delete:
      tags: [Usuários]
      summary: Desativar conta do usuário
      security: [{ bearerAuth: [] }]
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Conta desativada com sucesso"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "500":
          $ref: "#/components/responses/InternalServerError"

  # ===== ATIVIDADES =====
  ## GET endpoints
  /activities/types:
    get:
      tags: [Atividades]
      summary: Listar tipos de atividades
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object
                  properties:
                    id: { type: string }
                    name: { type: string }
        "401":
          $ref: "#/components/responses/Unauthorized"
        "500":
          $ref: "#/components/responses/InternalServerError"

  /activities:
    get:
      tags: [Atividades]
      summary: Listar atividades com paginação
      security: [{ bearerAuth: [] }]
      parameters:
        - in: query
          name: type
          schema: { type: string }
          description: ID do tipo de atividade para filtro
        - in: query
          name: page
          schema: { type: integer }
        - in: query
          name: pageSize
          schema: { type: integer }
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  activities:
                    type: array
                    items: { $ref: "#/components/schemas/Activity" }
        "401":
          $ref: "#/components/responses/Unauthorized"
        "500":
          $ref: "#/components/responses/InternalServerError"

  ## POST endpoints
  /activities/new:
    post:
      tags: [Atividades]
      summary: Criar nova atividade
      security: [{ bearerAuth: [] }]
      requestBody:
        required: true
        content:
          application/json:
            schema: { $ref: "#/components/schemas/Activity" }
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema: { $ref: "#/components/schemas/Activity" }
        "401":
          $ref: "#/components/responses/Unauthorized"

  /activities/{id}/subscribe:
    post:
      tags: [Atividades]
      summary: Inscrever-se em uma atividade
      security: [{ bearerAuth: [] }]
      parameters:
        - in: path
          name: id
          required: true
          schema: { type: string }
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Inscrição realizada com sucesso"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "500":
          $ref: "#/components/responses/InternalServerError"

  ## PUT endpoints
  /activities/{id}/update:
    put:
      tags: [Atividades]
      summary: Atualizar dados de uma atividade
      security: [{ bearerAuth: [] }]
      parameters:
        - in: path
          name: id
          required: true
          schema: { type: string }
      requestBody:
        required: true
        content:
          application/json:
            schema: { $ref: "#/components/schemas/Activity" }
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema: { $ref: "#/components/schemas/Activity" }
        "401":
          $ref: "#/components/responses/Unauthorized"
        "500":
          $ref: "#/components/responses/InternalServerError"

  /activities/{id}/conclude:
    put:
      tags: [Atividades]
      summary: Concluir uma atividade
      security: [{ bearerAuth: [] }]
      parameters:
        - in: path
          name: id
          required: true
          schema: { type: string }
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                confirmationCode: { type: string }
              required: [confirmationCode]
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Atividade concluída com sucesso"
        "401":
          $ref: "#/components/responses/Unauthorized"

  /activities/{id}/approve:
    put:
      tags: [Atividades]
      summary: Aprovar participação em uma atividade
      security: [{ bearerAuth: [] }]
      parameters:
        - in: path
          name: id
          required: true
          schema: { type: string }
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                participantId: { type: string }
              required: [participantId]
      responses:
        "200":
          description: Participação aprovada com sucesso
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Participação aprovada com sucesso"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "500":
          $ref: "#/components/responses/InternalServerError"

  /activities/{id}/check-in:
    put:
      tags: [Atividades]
      summary: Realizar check-in na atividade
      security: [{ bearerAuth: [] }]
      parameters:
        - in: path
          name: id
          required: true
          schema: { type: string }
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                confirmationCode: { type: string }
              required: [confirmationCode]
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Check-in realizado com sucesso"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "500":
          $ref: "#/components/responses/InternalServerError"

  ## DELETE endpoints
  /activities/{id}/unsubscribe:
    delete:
      tags: [Atividades]
      summary: Cancelar inscrição em uma atividade
      security: [{ bearerAuth: [] }]
      parameters:
        - in: path
          name: id
          required: true
          schema: { type: string }
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Inscrição cancelada com sucesso"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "500":
          $ref: "#/components/responses/InternalServerError"

  /activities/{id}/delete:
    delete:
      tags: [Atividades]
      summary: Excluir uma atividade
      security: [{ bearerAuth: [] }]
      parameters:
        - in: path
          name: id
          required: true
          schema: { type: string }
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Atividade excluída com sucesso"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "500":
          $ref: "#/components/responses/InternalServerError"
