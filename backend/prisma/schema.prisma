generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        String    @id @default(uuid())
  name      String    @db.VarChar(600)
  email     String    @unique
  cpf       String    @unique
  password  String
  avatar    String    @default("https://douglasfitmeet.s3.us-east-2.amazonaws.com/avatar.png")
  xp        Int       @default(0)
  level     Int       @default(1)
  deletedAt DateTime?
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt

  preferences       Preference[]
  achievements      UserAchievement[]
  createdActivities Activity[]            @relation("CreatorActivities")
  participants      ActivityParticipant[]
  addresses         ActivityAddress[]

  @@map("users")
}

model Activity {
  id               String       @id @default(uuid())
  title            String
  description      String
  type             ActivityType @relation(fields: [typeId], references: [id])
  typeId           String
  confirmationCode String
  image            String?
  scheduledDate    DateTime
  createdAt        DateTime     @default(now())
  deletedAt        DateTime?
  completedAt      DateTime?
  private          Boolean      @default(false)
  creator          User         @relation("CreatorActivities", fields: [creatorId], references: [id])
  creatorId        String

  address      ActivityAddress?
  participants ActivityParticipant[]

  @@map("activities")
}

model Achievement {
  id        String            @id @default(uuid())
  name      String            @unique
  criterion String
  users     UserAchievement[]

  @@map("achievements")
}

model UserAchievement {
  id            String      @id @default(uuid())
  user          User        @relation(fields: [userId], references: [id])
  userId        String
  achievement   Achievement @relation(fields: [achievementId], references: [id])
  achievementId String
  earnedAt      DateTime    @default(now())

  @@unique([userId, achievementId])
  @@map("user_achievements")
}

model Preference {
  id     String       @id @default(uuid())
  user   User         @relation(fields: [userId], references: [id])
  userId String
  type   ActivityType @relation(fields: [typeId], references: [id])
  typeId String

  @@unique([userId, typeId])
  @@map("preferences")
}

model ActivityAddress {
  id         String   @id @default(uuid())
  activity   Activity @relation(fields: [activityId], references: [id])
  activityId String   @unique
  latitude   Float
  longitude  Float
  User       User?    @relation(fields: [userId], references: [id])
  userId     String?

  @@map("activity_addresses")
}

model ActivityParticipant {
  id          String    @id @default(uuid())
  activity    Activity  @relation(fields: [activityId], references: [id])
  activityId  String
  user        User      @relation(fields: [userId], references: [id])
  userId      String
  approved    Boolean   @default(false)
  confirmedAt DateTime?
  createdAt   DateTime  @default(now())

  @@unique([activityId, userId])
  @@map("activity_participants")
}

model ActivityType {
  id          String       @id @default(uuid())
  name        String       @unique
  description String?
  image       String?
  activities  Activity[]
  preferences Preference[]

  @@map("activity_types")
}
